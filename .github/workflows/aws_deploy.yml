name: Deploy and Update Environment

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Start EC2 Instances
        run: |
          # Access instance IDs from GitHub Secrets
          aws ec2 start-instances --instance-ids "${{ secrets.APPLICATION_INSTANCE_ID }}" "${{ secrets.DATABASE_INSTANCE_ID }}"

      - name: Wait for instances to start
        run: |
          aws ec2 wait instance-running --instance-ids "${{ secrets.APPLICATION_INSTANCE_ID }}" "${{ secrets.DATABASE_INSTANCE_ID }}"

      - name: Get Database Instance IP
        id: get-database-ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids "${{ secrets.DATABASE_INSTANCE_ID }}" \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "database_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Get App Instance IP
        id: get-app-ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids "${{ secrets.APPLICATION_INSTANCE_ID }}" \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "app_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Update .env on Remote application Server
        env:
          SSH_APP_PRIVATE_KEY: ${{ secrets.SSH_APP_PRIVATE_KEY }}
          REMOTE_USER: "ubuntu"
          REMOTE_HOST: ${{ steps.get-app-ip.outputs.app_ip }}
          ENV_FILE_PATH: "/home/ubuntu/gemini-python-app/.env"
        run: |
          # Save SSH key
          echo "$SSH_APP_PRIVATE_KEY" > app_private_key.pem
          chmod 600 app_private_key.pem

          # Update DB_HOST in .env file
          ssh -i app_private_key.pem -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST \
            "sed -i 's/DB_HOST=.*/DB_HOST=${{ steps.get-database-ip.outputs.database_ip }}/g' $ENV_FILE_PATH"

          # Restart Docker container with corrected commands
          ssh -i app_private_key.pem -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST \
            "cd /home/ubuntu/gemini-python-app/ && \
            docker stop python-app-container || true && \
            docker rm python-app-container || true && \
            docker build -t python-app . && \
            docker run -d --env-file .env --name python-app-container python-app"

      - name: Schedule Automatic Shutdown
        env:
          SSH_APP_PRIVATE_KEY: ${{ secrets.SSH_APP_PRIVATE_KEY }}
          SSH_DATABASE_PRIVATE_KEY: ${{ secrets.SSH_DATABASE_PRIVATE_KEY }}
          REMOTE_USER: "ubuntu"
          REMOTE_APP_HOST: ${{ steps.get-app-ip.outputs.app_ip }}
          REMOTE_DATABASE_HOST: ${{ steps.get-database-ip.outputs.database_ip }}
        run: |
          echo "$SSH_APP_PRIVATE_KEY" > app_private_key.pem
          echo "$SSH_DATABASE_PRIVATE_KEY" > database_private_key.pem
          chmod 600 *.pem
          
          
          SHUTDOWN_CMD='
          if systemctl is-active --quiet auto-shutdown.timer; then
            echo "Timer auto-shutdown.timer already active, restarting..."
            sudo systemctl restart auto-shutdown.timer
          else
            echo "Timer auto-shutdown.timer not found, creating new..."
            sudo systemd-run --on-active=15m --unit=auto-shutdown.service systemctl poweroff
          fi
          '

          ssh -i app_private_key.pem -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_APP_HOST "$SHUTDOWN_CMD"

          ssh -i database_private_key.pem -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_DATABASE_HOST "$SHUTDOWN_CMD"